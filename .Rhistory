#model <- glm(diabetes ~ triglyceride_lvl, data=df_2, family=binomial)
#model <- glm(diabetes ~ triglyceride_lvl + age, data=df_2, family=binomial)
#model <- glm(diabetes ~ triglyceride_lvl + activity_per_week, data=df_2, family=binomial)
#model <- glm(diabetes ~ age, data=df_2, family=binomial)
#model <- glm(diabetes ~ activity_per_week, data=df_2, family=binomial)
#model <- glm(diabetes ~ age + activity_per_week, data=df_2, family=binomial)
#############
# Don't worry about all this, just make sure to run it to see your results!
#############
# Getting probabilities values for each row in our test dataset. We're using the
# model above to estimate the probability of each individual having diabetes, based
# on the specified predictive variables
test_data$pred_prob <- predict(model, test_data, type="response")
# Outputting the number of correct predictions
test_data %>%
# First, we have to convert probabilities to predictions. Since our output is
# binary (diabetes vs. no diabetes), all rows with a probability >=50% will be
# assigned as 1 (predicted to have diabetes) and everything else will be assigned
# as 0 (predicted to not have diabetes)
mutate(diabetes_predicted=case_when(pred_prob>=0.5 ~ 1,
TRUE ~ 0)) %>%
# Now, we need to find where our predictions are correct, that is, when our
# predicted label is equal to the true label
mutate(correct_pred=case_when(diabetes_predicted==diabetes_true ~ 1,
TRUE ~ 0)) %>%
# Now we simply add up the total number of correct predictions! Since there are
# 100 rows, you can interpret this value as the percent correct
summarize(sum(correct_pred))
# Reading in the test data
test_data <- read.csv("diabetes_test_set.csv")
#############
# Change stuff here!
#############
# Add different combinations of variables to our original logistic regression equation.
# You can do this by simply adding `+ var_name` to the right hand side of the
# equation. Here's an example:
#
# model <- glm(diabetes ~ age + activity_per_week, data=df, family=binomial)
#
# You can add however many variables you'd like (though we only have 4 to work with)
# Make sure that `data` is whatever the ORIGINAL data is, NOT the test data!
#Playing Around
#model <- glm(diabetes ~ ldl_lvl, data=df_2, family=binomial)
#model <- glm(diabetes ~ ldl_lvl + triglyceride_lvl, data=df_2, family=binomial)
#model <- glm(diabetes ~ ldl_lvl + age, data=df_2, family=binomial)
#model <- glm(diabetes ~ ldl_lvl + activity_per_week, data=df_2, family=binomial)
model <- glm(diabetes ~ triglyceride_lvl, data=df_2, family=binomial)
#model <- glm(diabetes ~ triglyceride_lvl + age, data=df_2, family=binomial)
#model <- glm(diabetes ~ triglyceride_lvl + activity_per_week, data=df_2, family=binomial)
#model <- glm(diabetes ~ age, data=df_2, family=binomial)
#model <- glm(diabetes ~ activity_per_week, data=df_2, family=binomial)
#model <- glm(diabetes ~ age + activity_per_week, data=df_2, family=binomial)
#############
# Don't worry about all this, just make sure to run it to see your results!
#############
# Getting probabilities values for each row in our test dataset. We're using the
# model above to estimate the probability of each individual having diabetes, based
# on the specified predictive variables
test_data$pred_prob <- predict(model, test_data, type="response")
# Outputting the number of correct predictions
test_data %>%
# First, we have to convert probabilities to predictions. Since our output is
# binary (diabetes vs. no diabetes), all rows with a probability >=50% will be
# assigned as 1 (predicted to have diabetes) and everything else will be assigned
# as 0 (predicted to not have diabetes)
mutate(diabetes_predicted=case_when(pred_prob>=0.5 ~ 1,
TRUE ~ 0)) %>%
# Now, we need to find where our predictions are correct, that is, when our
# predicted label is equal to the true label
mutate(correct_pred=case_when(diabetes_predicted==diabetes_true ~ 1,
TRUE ~ 0)) %>%
# Now we simply add up the total number of correct predictions! Since there are
# 100 rows, you can interpret this value as the percent correct
summarize(sum(correct_pred))
# Reading in the test data
test_data <- read.csv("diabetes_test_set.csv")
#############
# Change stuff here!
#############
# Add different combinations of variables to our original logistic regression equation.
# You can do this by simply adding `+ var_name` to the right hand side of the
# equation. Here's an example:
#
# model <- glm(diabetes ~ age + activity_per_week, data=df, family=binomial)
#
# You can add however many variables you'd like (though we only have 4 to work with)
# Make sure that `data` is whatever the ORIGINAL data is, NOT the test data!
#Playing Around
#model <- glm(diabetes ~ ldl_lvl, data=df_2, family=binomial)
#model <- glm(diabetes ~ ldl_lvl + triglyceride_lvl, data=df_2, family=binomial)
#model <- glm(diabetes ~ ldl_lvl + age, data=df_2, family=binomial)
#model <- glm(diabetes ~ ldl_lvl + activity_per_week, data=df_2, family=binomial)
#model <- glm(diabetes ~ triglyceride_lvl, data=df_2, family=binomial)
model <- glm(diabetes ~ triglyceride_lvl + age, data=df_2, family=binomial)
#model <- glm(diabetes ~ triglyceride_lvl + activity_per_week, data=df_2, family=binomial)
#model <- glm(diabetes ~ age, data=df_2, family=binomial)
#model <- glm(diabetes ~ activity_per_week, data=df_2, family=binomial)
#model <- glm(diabetes ~ age + activity_per_week, data=df_2, family=binomial)
#############
# Don't worry about all this, just make sure to run it to see your results!
#############
# Getting probabilities values for each row in our test dataset. We're using the
# model above to estimate the probability of each individual having diabetes, based
# on the specified predictive variables
test_data$pred_prob <- predict(model, test_data, type="response")
# Outputting the number of correct predictions
test_data %>%
# First, we have to convert probabilities to predictions. Since our output is
# binary (diabetes vs. no diabetes), all rows with a probability >=50% will be
# assigned as 1 (predicted to have diabetes) and everything else will be assigned
# as 0 (predicted to not have diabetes)
mutate(diabetes_predicted=case_when(pred_prob>=0.5 ~ 1,
TRUE ~ 0)) %>%
# Now, we need to find where our predictions are correct, that is, when our
# predicted label is equal to the true label
mutate(correct_pred=case_when(diabetes_predicted==diabetes_true ~ 1,
TRUE ~ 0)) %>%
# Now we simply add up the total number of correct predictions! Since there are
# 100 rows, you can interpret this value as the percent correct
summarize(sum(correct_pred))
# Reading in the test data
test_data <- read.csv("diabetes_test_set.csv")
#############
# Change stuff here!
#############
# Add different combinations of variables to our original logistic regression equation.
# You can do this by simply adding `+ var_name` to the right hand side of the
# equation. Here's an example:
#
# model <- glm(diabetes ~ age + activity_per_week, data=df, family=binomial)
#
# You can add however many variables you'd like (though we only have 4 to work with)
# Make sure that `data` is whatever the ORIGINAL data is, NOT the test data!
#Playing Around
#model <- glm(diabetes ~ ldl_lvl, data=df_2, family=binomial)
#model <- glm(diabetes ~ ldl_lvl + triglyceride_lvl, data=df_2, family=binomial)
#model <- glm(diabetes ~ ldl_lvl + age, data=df_2, family=binomial)
#model <- glm(diabetes ~ ldl_lvl + activity_per_week, data=df_2, family=binomial)
#model <- glm(diabetes ~ triglyceride_lvl, data=df_2, family=binomial)
#model <- glm(diabetes ~ triglyceride_lvl + age, data=df_2, family=binomial)
model <- glm(diabetes ~ triglyceride_lvl + activity_per_week, data=df_2, family=binomial)
#model <- glm(diabetes ~ age, data=df_2, family=binomial)
#model <- glm(diabetes ~ activity_per_week, data=df_2, family=binomial)
#model <- glm(diabetes ~ age + activity_per_week, data=df_2, family=binomial)
#############
# Don't worry about all this, just make sure to run it to see your results!
#############
# Getting probabilities values for each row in our test dataset. We're using the
# model above to estimate the probability of each individual having diabetes, based
# on the specified predictive variables
test_data$pred_prob <- predict(model, test_data, type="response")
# Outputting the number of correct predictions
test_data %>%
# First, we have to convert probabilities to predictions. Since our output is
# binary (diabetes vs. no diabetes), all rows with a probability >=50% will be
# assigned as 1 (predicted to have diabetes) and everything else will be assigned
# as 0 (predicted to not have diabetes)
mutate(diabetes_predicted=case_when(pred_prob>=0.5 ~ 1,
TRUE ~ 0)) %>%
# Now, we need to find where our predictions are correct, that is, when our
# predicted label is equal to the true label
mutate(correct_pred=case_when(diabetes_predicted==diabetes_true ~ 1,
TRUE ~ 0)) %>%
# Now we simply add up the total number of correct predictions! Since there are
# 100 rows, you can interpret this value as the percent correct
summarize(sum(correct_pred))
# Reading in the test data
test_data <- read.csv("diabetes_test_set.csv")
#############
# Change stuff here!
#############
# Add different combinations of variables to our original logistic regression equation.
# You can do this by simply adding `+ var_name` to the right hand side of the
# equation. Here's an example:
#
# model <- glm(diabetes ~ age + activity_per_week, data=df, family=binomial)
#
# You can add however many variables you'd like (though we only have 4 to work with)
# Make sure that `data` is whatever the ORIGINAL data is, NOT the test data!
#Playing Around
#model <- glm(diabetes ~ ldl_lvl, data=df_2, family=binomial)
#model <- glm(diabetes ~ ldl_lvl + triglyceride_lvl, data=df_2, family=binomial)
#model <- glm(diabetes ~ ldl_lvl + age, data=df_2, family=binomial)
#model <- glm(diabetes ~ ldl_lvl + activity_per_week, data=df_2, family=binomial)
#model <- glm(diabetes ~ triglyceride_lvl, data=df_2, family=binomial)
#model <- glm(diabetes ~ triglyceride_lvl + age, data=df_2, family=binomial)
#model <- glm(diabetes ~ triglyceride_lvl + activity_per_week, data=df_2, family=binomial)
model <- glm(diabetes ~ age, data=df_2, family=binomial)
#model <- glm(diabetes ~ activity_per_week, data=df_2, family=binomial)
#model <- glm(diabetes ~ age + activity_per_week, data=df_2, family=binomial)
#############
# Don't worry about all this, just make sure to run it to see your results!
#############
# Getting probabilities values for each row in our test dataset. We're using the
# model above to estimate the probability of each individual having diabetes, based
# on the specified predictive variables
test_data$pred_prob <- predict(model, test_data, type="response")
# Outputting the number of correct predictions
test_data %>%
# First, we have to convert probabilities to predictions. Since our output is
# binary (diabetes vs. no diabetes), all rows with a probability >=50% will be
# assigned as 1 (predicted to have diabetes) and everything else will be assigned
# as 0 (predicted to not have diabetes)
mutate(diabetes_predicted=case_when(pred_prob>=0.5 ~ 1,
TRUE ~ 0)) %>%
# Now, we need to find where our predictions are correct, that is, when our
# predicted label is equal to the true label
mutate(correct_pred=case_when(diabetes_predicted==diabetes_true ~ 1,
TRUE ~ 0)) %>%
# Now we simply add up the total number of correct predictions! Since there are
# 100 rows, you can interpret this value as the percent correct
summarize(sum(correct_pred))
# Reading in the test data
test_data <- read.csv("diabetes_test_set.csv")
#############
# Change stuff here!
#############
# Add different combinations of variables to our original logistic regression equation.
# You can do this by simply adding `+ var_name` to the right hand side of the
# equation. Here's an example:
#
# model <- glm(diabetes ~ age + activity_per_week, data=df, family=binomial)
#
# You can add however many variables you'd like (though we only have 4 to work with)
# Make sure that `data` is whatever the ORIGINAL data is, NOT the test data!
#Playing Around
#model <- glm(diabetes ~ ldl_lvl, data=df_2, family=binomial)
#model <- glm(diabetes ~ ldl_lvl + triglyceride_lvl, data=df_2, family=binomial)
#model <- glm(diabetes ~ ldl_lvl + age, data=df_2, family=binomial)
#model <- glm(diabetes ~ ldl_lvl + activity_per_week, data=df_2, family=binomial)
#model <- glm(diabetes ~ triglyceride_lvl, data=df_2, family=binomial)
#model <- glm(diabetes ~ triglyceride_lvl + age, data=df_2, family=binomial)
#model <- glm(diabetes ~ triglyceride_lvl + activity_per_week, data=df_2, family=binomial)
#model <- glm(diabetes ~ age, data=df_2, family=binomial)
model <- glm(diabetes ~ activity_per_week, data=df_2, family=binomial)
#model <- glm(diabetes ~ age + activity_per_week, data=df_2, family=binomial)
#############
# Don't worry about all this, just make sure to run it to see your results!
#############
# Getting probabilities values for each row in our test dataset. We're using the
# model above to estimate the probability of each individual having diabetes, based
# on the specified predictive variables
test_data$pred_prob <- predict(model, test_data, type="response")
# Outputting the number of correct predictions
test_data %>%
# First, we have to convert probabilities to predictions. Since our output is
# binary (diabetes vs. no diabetes), all rows with a probability >=50% will be
# assigned as 1 (predicted to have diabetes) and everything else will be assigned
# as 0 (predicted to not have diabetes)
mutate(diabetes_predicted=case_when(pred_prob>=0.5 ~ 1,
TRUE ~ 0)) %>%
# Now, we need to find where our predictions are correct, that is, when our
# predicted label is equal to the true label
mutate(correct_pred=case_when(diabetes_predicted==diabetes_true ~ 1,
TRUE ~ 0)) %>%
# Now we simply add up the total number of correct predictions! Since there are
# 100 rows, you can interpret this value as the percent correct
summarize(sum(correct_pred))
# Reading in the test data
test_data <- read.csv("diabetes_test_set.csv")
#############
# Change stuff here!
#############
# Add different combinations of variables to our original logistic regression equation.
# You can do this by simply adding `+ var_name` to the right hand side of the
# equation. Here's an example:
#
# model <- glm(diabetes ~ age + activity_per_week, data=df, family=binomial)
#
# You can add however many variables you'd like (though we only have 4 to work with)
# Make sure that `data` is whatever the ORIGINAL data is, NOT the test data!
#Playing Around
#model <- glm(diabetes ~ ldl_lvl, data=df_2, family=binomial)
#model <- glm(diabetes ~ ldl_lvl + triglyceride_lvl, data=df_2, family=binomial)
#model <- glm(diabetes ~ ldl_lvl + age, data=df_2, family=binomial)
#model <- glm(diabetes ~ ldl_lvl + activity_per_week, data=df_2, family=binomial)
#model <- glm(diabetes ~ triglyceride_lvl, data=df_2, family=binomial)
#model <- glm(diabetes ~ triglyceride_lvl + age, data=df_2, family=binomial)
#model <- glm(diabetes ~ triglyceride_lvl + activity_per_week, data=df_2, family=binomial)
#model <- glm(diabetes ~ age, data=df_2, family=binomial)
#model <- glm(diabetes ~ activity_per_week, data=df_2, family=binomial)
model <- glm(diabetes ~ age + activity_per_week, data=df_2, family=binomial)
#############
# Don't worry about all this, just make sure to run it to see your results!
#############
# Getting probabilities values for each row in our test dataset. We're using the
# model above to estimate the probability of each individual having diabetes, based
# on the specified predictive variables
test_data$pred_prob <- predict(model, test_data, type="response")
# Outputting the number of correct predictions
test_data %>%
# First, we have to convert probabilities to predictions. Since our output is
# binary (diabetes vs. no diabetes), all rows with a probability >=50% will be
# assigned as 1 (predicted to have diabetes) and everything else will be assigned
# as 0 (predicted to not have diabetes)
mutate(diabetes_predicted=case_when(pred_prob>=0.5 ~ 1,
TRUE ~ 0)) %>%
# Now, we need to find where our predictions are correct, that is, when our
# predicted label is equal to the true label
mutate(correct_pred=case_when(diabetes_predicted==diabetes_true ~ 1,
TRUE ~ 0)) %>%
# Now we simply add up the total number of correct predictions! Since there are
# 100 rows, you can interpret this value as the percent correct
summarize(sum(correct_pred))
# Reading in the test data
test_data <- read.csv("diabetes_test_set.csv")
#############
# Change stuff here!
#############
# Add different combinations of variables to our original logistic regression equation.
# You can do this by simply adding `+ var_name` to the right hand side of the
# equation. Here's an example:
#
# model <- glm(diabetes ~ age + activity_per_week, data=df, family=binomial)
#
# You can add however many variables you'd like (though we only have 4 to work with)
# Make sure that `data` is whatever the ORIGINAL data is, NOT the test data!
#Playing Around
#model <- glm(diabetes ~ ldl_lvl, data=df_2, family=binomial)
#model <- glm(diabetes ~ ldl_lvl + triglyceride_lvl, data=df_2, family=binomial)
#model <- glm(diabetes ~ ldl_lvl + age, data=df_2, family=binomial)
#model <- glm(diabetes ~ ldl_lvl + activity_per_week, data=df_2, family=binomial)
#model <- glm(diabetes ~ triglyceride_lvl, data=df_2, family=binomial)
#model <- glm(diabetes ~ triglyceride_lvl + age, data=df_2, family=binomial)
#model <- glm(diabetes ~ triglyceride_lvl + activity_per_week, data=df_2, family=binomial)
#model <- glm(diabetes ~ age, data=df_2, family=binomial)
#model <- glm(diabetes ~ activity_per_week, data=df_2, family=binomial)
#model <- glm(diabetes ~ age + activity_per_week, data=df_2, family=binomial)
model <- glm(diabetes ~ ldl_lvl + triglyceride_lvl + age, data=df_2, family=binomial)
#############
# Don't worry about all this, just make sure to run it to see your results!
#############
# Getting probabilities values for each row in our test dataset. We're using the
# model above to estimate the probability of each individual having diabetes, based
# on the specified predictive variables
test_data$pred_prob <- predict(model, test_data, type="response")
# Outputting the number of correct predictions
test_data %>%
# First, we have to convert probabilities to predictions. Since our output is
# binary (diabetes vs. no diabetes), all rows with a probability >=50% will be
# assigned as 1 (predicted to have diabetes) and everything else will be assigned
# as 0 (predicted to not have diabetes)
mutate(diabetes_predicted=case_when(pred_prob>=0.5 ~ 1,
TRUE ~ 0)) %>%
# Now, we need to find where our predictions are correct, that is, when our
# predicted label is equal to the true label
mutate(correct_pred=case_when(diabetes_predicted==diabetes_true ~ 1,
TRUE ~ 0)) %>%
# Now we simply add up the total number of correct predictions! Since there are
# 100 rows, you can interpret this value as the percent correct
summarize(sum(correct_pred))
# Reading in the test data
test_data <- read.csv("diabetes_test_set.csv")
#############
# Change stuff here!
#############
# Add different combinations of variables to our original logistic regression equation.
# You can do this by simply adding `+ var_name` to the right hand side of the
# equation. Here's an example:
#
# model <- glm(diabetes ~ age + activity_per_week, data=df, family=binomial)
#
# You can add however many variables you'd like (though we only have 4 to work with)
# Make sure that `data` is whatever the ORIGINAL data is, NOT the test data!
#Playing Around
#model <- glm(diabetes ~ ldl_lvl, data=df_2, family=binomial)
#model <- glm(diabetes ~ ldl_lvl + triglyceride_lvl, data=df_2, family=binomial)
#model <- glm(diabetes ~ ldl_lvl + age, data=df_2, family=binomial)
#model <- glm(diabetes ~ ldl_lvl + activity_per_week, data=df_2, family=binomial)
#model <- glm(diabetes ~ triglyceride_lvl, data=df_2, family=binomial)
#model <- glm(diabetes ~ triglyceride_lvl + age, data=df_2, family=binomial)
#model <- glm(diabetes ~ triglyceride_lvl + activity_per_week, data=df_2, family=binomial)
#model <- glm(diabetes ~ age, data=df_2, family=binomial)
#model <- glm(diabetes ~ activity_per_week, data=df_2, family=binomial)
#model <- glm(diabetes ~ age + activity_per_week, data=df_2, family=binomial)
#model <- glm(diabetes ~ ldl_lvl + triglyceride_lvl + age, data=df_2, family=binomial)
model <- glm(diabetes ~ ldl_lvl + triglyceride_lvl + age + activity_per_week, data=df_2, family=binomial)
#############
# Don't worry about all this, just make sure to run it to see your results!
#############
# Getting probabilities values for each row in our test dataset. We're using the
# model above to estimate the probability of each individual having diabetes, based
# on the specified predictive variables
test_data$pred_prob <- predict(model, test_data, type="response")
# Outputting the number of correct predictions
test_data %>%
# First, we have to convert probabilities to predictions. Since our output is
# binary (diabetes vs. no diabetes), all rows with a probability >=50% will be
# assigned as 1 (predicted to have diabetes) and everything else will be assigned
# as 0 (predicted to not have diabetes)
mutate(diabetes_predicted=case_when(pred_prob>=0.5 ~ 1,
TRUE ~ 0)) %>%
# Now, we need to find where our predictions are correct, that is, when our
# predicted label is equal to the true label
mutate(correct_pred=case_when(diabetes_predicted==diabetes_true ~ 1,
TRUE ~ 0)) %>%
# Now we simply add up the total number of correct predictions! Since there are
# 100 rows, you can interpret this value as the percent correct
summarize(sum(correct_pred))
df <- read.csv("cdc_vaccine_prices.csv")
setwd("C:/Users/dears/Desktop/school thing/UW/INFO478/info-478-project/Sheamin")
library(tidyverse)
df <- read.csv("cdc_vaccine_prices.csv")
View(df)
inflation_df <- read.csv("inflation_cpis.csv")
plot_1 <- df %>%
group_by(Date) %>%
summarise(average_prive = mean(Private.Sector.Cost..Dose))
vax_df$Private.Sector.Cost..Dose = gsub("\\$", "", vax_df$Private.Sector.Cost..Dose)
vax_df$CDC.Cost..Dose = gsub("\\$", "", vax_df$CDC.Cost..Dose)
vax_df <- read.csv("cdc_vaccine_prices.csv")
inflation_df <- read.csv("inflation_cpis.csv")
vax_df$Private.Sector.Cost..Dose = gsub("\\$", "", vax_df$Private.Sector.Cost..Dose)
vax_df$CDC.Cost..Dose = gsub("\\$", "", vax_df$CDC.Cost..Dose)
View(vax_df)
plot_1 <- df %>%
group_by(Date) %>%
summarise(average_prive = mean(Private.Sector.Cost..Dose))
print(plot_1)
plot_1 <- vax_df %>%
group_by(Date) %>%
summarise(average_prive = mean(Private.Sector.Cost..Dose))
vax_df$Private.Sector.Cost..Dose <- as.numeric(as.character(vax_df$Private.Sector.Cost..Dose))
sapply(vax_df, class)
vax_df$Private.Sector.Cost..Dose <- as.numeric(as.character(vax_df$Private.Sector.Cost..Dose))
sapply(vax_df, class)
vax_df$vax_df$CDC.Cost..Dose <- as.numeric(as.character(vax_df$CDC.Cost..Dose))
sapply(vax_df, class)
plot_1 <- vax_df %>%
group_by(Date) %>%
summarise(average_prive = mean(Private.Sector.Cost..Dose))
print(plot_1)
View(plot_1)
ggplot(aes(x=Date), y=average_prive) +
geom_bar()
ggplot(aes(x=Date, y=average_prive)) +
geom_bar()
print(plot_1)
plot_1 <- vax_df %>%
group_by(Date) %>%
summarise(average_prive = mean(Private.Sector.Cost..Dose)) %>%
ggplot(aes(x=Date, y=average_prive)) +
geom_bar()
print(plot_1)
plot_1 <- vax_df %>%
group_by(Date) %>%
summarise(average_prive = mean(Private.Sector.Cost..Dose)) %>%
ggplot(aes(x=Date, y=average_prive)) +
geom_col()
print(plot_1)
plot_1 <- vax_df %>%
group_by(Date) %>%
summarise(average_price = mean(Private.Sector.Cost..Dose),
average_cdc_price = mean(CDC.Cost..Dose)) %>%
ggplot(aes(x=Date, y=average_price)) +
geom_col()
plot_1 <- vax_df %>%
group_by(Date) %>%
summarise(average_price = mean(Private.Sector.Cost..Dose)) %>%
ggplot(aes(x=Date, y=average_price)) +
geom_col()
print(plot_1)
plot_1 <- vax_df %>%
group_by(Date) %>%
summarise(average_price = mean(Private.Sector.Cost..Dose)) %>%
ggplot(aes(x=Date, y=average_price)) +
geom_col() +
theme(axis.text.x = element_text(angle = 90))
print(plot_1)
View(inflation_df)
inflation_df <- read.csv("inflation_cpis.csv")
View(inflation_df)
vax_df$Date <- as.Date(vax_df$Date)
# extract the year and convert to numeric format
vax_df$year <- as.numeric(format(vax_df$Date, "%Y"))
vax_df <- read.csv("cdc_vaccine_prices.csv")
vax_df$Private.Sector.Cost..Dose = gsub("\\$", "", vax_df$Private.Sector.Cost..Dose)
vax_df$CDC.Cost..Dose = gsub("\\$", "", vax_df$CDC.Cost..Dose)
vax_df$Private.Sector.Cost..Dose <- as.numeric(as.character(vax_df$Private.Sector.Cost..Dose))
sapply(vax_df, class)
vax_df$vax_df$CDC.Cost..Dose <- as.numeric(as.character(vax_df$CDC.Cost..Dose))
sapply(vax_df, class)
vax_df$Date <- as.Date(vax_df$Date)
# extract the year and convert to numeric format
vax_df$year <- as.numeric(format(vax_df$Date, "%Y"))
inflation_df <- read.csv("inflation_cpis.csv")
vax_df = merge(x = vax_df, y = inflation_df, by = "year")
# Adjust prices for inflation based on the reference CPI
vax_df$adjusted_price <- df$Private.Sector.Cost..Dose * (reference_cpi / vax_df$CPI)
reference_year <- 2024
# Get CPI for the reference year
reference_cpi <- vax_df$CPI[vax_df$year == reference_year]
# Adjust prices for inflation based on the reference CPI
vax_df$adjusted_price <- df$Private.Sector.Cost..Dose * (reference_cpi / vax_df$CPI)
Adjust prices for inflation based on the reference CPI
#
#Year 2 Price = Year 1 Price x (Year 2 CPI/Year 1 CPI)
# Adjust prices for inflation based on the reference CPI
vax_df$adjusted_price <- df$Private.Sector.Cost..Dose * (reference_cpi / vax_df$CPI)
vax_df$CPI <- as.numeric(as.character(vax_df$CPI))
sapply(vax_df, class)
reference_year <- 2024
# Get CPI for the reference year
reference_cpi <- vax_df$CPI[vax_df$year == reference_year]
# Adjust prices for inflation based on the reference CPI
vax_df$adjusted_price <- df$Private.Sector.Cost..Dose * (reference_cpi / vax_df$CPI)
print(typeof(reference_cpi))
reference_year <- 2024
# Get CPI for the reference year
reference_cpi <- vax_df$CPI[vax_df$year == reference_year]
# Adjust prices for inflation based on the reference CPI
vax_df$adjusted_price <- vax_df$Private.Sector.Cost..Dose * (reference_cpi / vax_df$CPI)
